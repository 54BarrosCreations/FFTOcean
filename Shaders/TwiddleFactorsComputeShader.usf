#include "/Engine/Private/Common.ush"
#include "Common.ush"

RWTexture2D<float4> OutputTwiddleFactorsTexture;
RWStructuredBuffer<int> InputTwiddleIndicesBuffer;

[numthreads(64, 16, 1)]
void ComputeTwiddleFactors(uint3 ThreadId : SV_DispatchThreadID, uint3 GroupId : SV_GroupID)
{
    DECLARE_TEXTURE_SIZE_WITH_NAME(OutputTwiddleFactorsTexture, TextureSize);
    
    const int N = TextureSize.y;
    
    float K = fmod(ThreadId.y * (N / pow(2, GroupId.x + 1)), N);
    float Sin, Cos;
    sincos(TWO_PI * K / N, Sin, Cos);
    
    Complex Twiddle = MakeComplex(Sin, Cos);	
    int ButterflyWing = fmod(ThreadId.y, pow(2, GroupId.x + 1)) < pow(2, GroupId.x) ? 1 : 0;

    [Branch]
    if (ThreadId.x == 0)
    {
        int IndexA = ThreadId.y - ButterflyWing - 1;
        int IndexB = ThreadId.y + ButterflyWing;
        OutputTwiddleFactorsTexture[ThreadId.xy] = float4(Twiddle.Re, Twiddle.Im, InputTwiddleIndicesBuffer[IndexA], InputTwiddleIndicesBuffer[IndexB]);
    }
    
    else
    {
        int ButterflySpan = pow(2, GroupId.x);
        int IndexA = ThreadId.y - ButterflySpan * ButterflyWing - 1;
        int IndexB = ThreadId.y + ButterflySpan * ButterflyWing;
        OutputTwiddleFactorsTexture[ThreadId.xy] = float4(Twiddle.Re, Twiddle.Im, InputTwiddleIndicesBuffer[IndexA], InputTwiddleIndicesBuffer[IndexB]);
    }
}