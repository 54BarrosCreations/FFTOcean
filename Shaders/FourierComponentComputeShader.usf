#include "/Engine/Private/Common.ush"
#include "Common.ush"

Texture2D<float4> InputPhillipsFourierTexture;

RWTexture2D<float2> OutputSurfaceTextureX;
RWTexture2D<float2> OutputSurfaceTextureY;
RWTexture2D<float2> OutputSurfaceTextureZ;

[numthreads(32, 32, 1)]
void ComputeFourierComponent(uint3 ThreadId : SV_DispatchThreadID)
{
    const float L = 1000.0;
    const float Time = FourierComponentUniform.Time;
    
    DECLARE_TEXTURE_SIZE_WITH_NAME(InputPhillipsFourierTexture, FourierTextureSize);
    
    float2 K = TWO_PI * (ThreadId.xy - FourierTextureSize / 2) / L;
    float KNorm = max(length(K), 0.0001);
    
    float Omega = sqrt(GRAVITY * KNorm);
    
    float4 FourierTextureValue = InputPhillipsFourierTexture.Load(int3(ThreadId.xy, 0));
    Complex H0K      = MakeComplex(FourierTextureValue.rg);
    Complex H0MinusK = MakeComplex(FourierTextureValue.ba);
    
    float SinV, CosV;
    sincos(Omega * Time, SinV, CosV);

    Complex ExpOmegaTime    = MakeComplex(CosV, SinV);  // exp(iwt)
    Complex ExpOmegaTimeInv = Conj(ExpOmegaTime);       // exp(-iwt)
    
    // dz: Vertical/Up displacement
    Complex HKt_dz = Add(Mul(H0K, ExpOmegaTime), Mul(H0MinusK, ExpOmegaTimeInv));
    
    // dx: Forward displacement
    Complex dx = MakeComplex(K.x / KNorm, -K.x / KNorm);
    Complex HKt_dx = Mul(HKt_dz, dx);
    
    // dy: Right displacement
    Complex dy = MakeComplex(K.y / KNorm, -K.y / KNorm);
    Complex HKt_dy = Mul(HKt_dz, dy);
    
    OutputSurfaceTextureX[ThreadId.xy] = float2(HKt_dx.Re, HKt_dx.Im);
    OutputSurfaceTextureY[ThreadId.xy] = float2(HKt_dy.Re, HKt_dy.Im);
    OutputSurfaceTextureZ[ThreadId.xy] = float2(HKt_dz.Re, HKt_dz.Im);
}