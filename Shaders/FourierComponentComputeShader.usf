#include "/Engine/Private/Common.ush"
#include "Common.ush"

Texture2D<float4> InputPhillipsFourierTexture;

RWTexture2D<float2> OutputSurfaceTextureX;
RWTexture2D<float2> OutputSurfaceTextureY;
RWTexture2D<float2> OutputSurfaceTextureZ;

[numthreads(32, 32, 1)]
void ComputeFourierComponent(uint3 ThreadId : SV_DispatchThreadID)
{
    const float L = 1000.0;
    const float Time = FourierComponentUniform.Time;
    
    DECLARE_TEXTURE_SIZE_WITH_NAME(InputPhillipsFourierTexture, FourierTextureSize);
    
    float2 K = TWO_PI * ThreadId.xy / L;
    float KNorm = max(length(K), 0.0001);
    
    float Omega = sqrt(GRAVITY * KNorm);
    
    float4 FourierTextureValue = InputPhillipsFourierTexture.Load(int3(ThreadId.xy, 0));
    float H0K      = float2(FourierTextureValue.rg);
    float H0MinusK = float2(FourierTextureValue.ba);
    
    float SinV, CosV;
    sincos(Omega * Time, SinV, CosV);

    float2 ExpOmegaTime    = float2(CosV, SinV);  // exp(iwt)
    float2 ExpOmegaTimeInv = float2(CosV, -SinV); // exp(-iwt) conjugate
    
    // dz: Vertical/Up displacement
    float2 HKt_dz = H0K * ExpOmegaTime + H0MinusK * ExpOmegaTimeInv;
    
    // dx: Forward displacement
    float2 dx = float2(K.x, -K.x) / KNorm;
    float2 HKt_dx = HKt_dz * dx;
    
    // dy: Right displacement
    float2 dy = float2(K.y, -K.y) / KNorm;
    float2 HKt_dy = HKt_dz * dy;
    
    OutputSurfaceTextureX[ThreadId.xy] = HKt_dx;
    OutputSurfaceTextureY[ThreadId.xy] = HKt_dy;
    OutputSurfaceTextureZ[ThreadId.xy] = HKt_dz;
}