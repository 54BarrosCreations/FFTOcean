#include "/Engine/Private/Common.ush"
#include "Common.ush"

RWTexture2D<float2> OutputInverseTransformTexture;
Texture2D<float2> InputFourierComponentTexture;
Texture2D<float4> InputTwiddleFactorsTexture;

float2 ComplexMult(float2 A, float2 B)
{
    float2 C;
    C.x = A.x * B.x - A.y * B.y;
    C.y = A.x * B.y + A.y * B.x;
    return C;
}

[numthreads(32, 32, 1)]
void ComputeInverseTransform(uint3 ThreadId : SV_DispatchThreadID)
{
    DECLARE_TEXTURE_SIZE_WITH_NAME(InputTwiddleFactorsTexture, TwiddleFactorsSize);
    
    const int Stage      = InverseTransformUniform.Stage;
    const int StageCount = InverseTransformUniform.StageCount;
    const int Direction  = InverseTransformUniform.Direction;
    
    int X = ThreadId.x;
    int Y = ThreadId.y;
        
    [Branch]
    // Horizontal
    if (Direction == 0)
    {
        float4 TwiddleFactor = InputTwiddleFactorsTexture.Load(int3(Stage, X, 0));
        float2 P = InputFourierComponentTexture.Load(int3(TwiddleFactor.z, Y, 0));
        float2 Q = InputFourierComponentTexture.Load(int3(TwiddleFactor.w, Y, 0));
        float2 W = TwiddleFactor.xy;
        float2 H = P + ComplexMult(W, Q);
    
        OutputInverseTransformTexture[ThreadId.xy] = H;
    }
    
    // Vertical
    else
    {
        float4 TwiddleFactor = InputTwiddleFactorsTexture.Load(int3(Stage, Y, 0));
        float2 P = InputFourierComponentTexture.Load(int3(X, TwiddleFactor.z, 0));
        float2 Q = InputFourierComponentTexture.Load(int3(X, TwiddleFactor.w, 0));
        float2 W = TwiddleFactor.xy;
        float2 H = P + ComplexMult(W, Q);
        
        OutputInverseTransformTexture[ThreadId.xy] = H;
    }
}